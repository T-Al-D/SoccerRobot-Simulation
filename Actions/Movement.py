"""!
@file 
@brief function for movement in simulation
"""

import random
import pygame
from Classes.SoccerRobot import SoccerRobot
from Constants import Const


# Move the player based on key pressed
def playerMovement(key: pygame.key, player: SoccerRobot):
    """!
    @brief player movements depending on what key is generated by the computer

    @param keys the key events that got pressed
    @param player the soccer robot that is being moved / moves

    @return void This function does not return a value.
    """
    match key:
        case pygame.K_UP:
            player.currentDirection = Const.NORTH_DIRECTION
        case pygame.K_DOWN:
            player.currentDirection = Const.SOUTH_DIRECTION
        case pygame.K_RIGHT:
            player.currentDirection = Const.EAST_DIRECTION
        case pygame.K_LEFT:
            player.currentDirection = Const.WEST_DIRECTION
        case _:
            pass
    player.move()


def playerManualMove(keys, player: SoccerRobot):
    """!
    @brief player movements depending on what key is pressed

    @param keys the key events that got pressed
    @param player the soccer robot that is being moved / moves

    @return void This function does not return a value.
    """
    if keys[pygame.K_LEFT]:
        player.currentDirection = Const.WEST_DIRECTION
    elif keys[pygame.K_RIGHT]:
        player.currentDirection = Const.EAST_DIRECTION
    elif keys[pygame.K_UP]:
        player.currentDirection = Const.NORTH_DIRECTION
    elif keys[pygame.K_DOWN]:
        player.currentDirection = Const.SOUTH_DIRECTION
    player.move()


def playerCollideMove(player: SoccerRobot):
    """!
    @brief once a player has collided with another player,
    move the player in opposite direction to prevent a "walk over"

    @param player, the current player that has the collision

    @return void This function does not return a value.
    """
    secondMove: int = Const.STANDING_STILL
    randomHorizontal: int = random.choice(Const.HORIZONTAL_MOVEMENT)
    randomVertival: int = random.choice(Const.VERTICAL_MOVEMENT)

    stepBack: float = 2.25
    match player.currentDirection:
        case Const.WEST_DIRECTION:
            player.currentDirection = Const.EAST_DIRECTION
            secondMove = randomVertival
        case Const.EAST_DIRECTION:
            player.currentDirection = Const.WEST_DIRECTION
            secondMove = randomVertival
        case Const.NORTH_DIRECTION:
            player.currentDirection = Const.SOUTH_DIRECTION
            secondMove = randomHorizontal
        case Const.SOUTH_DIRECTION:
            player.currentDirection = Const.NORTH_DIRECTION
            secondMove = randomHorizontal
        case _:
            pass
    player.move(stepBack)

    # secondMove is an additional move needed to evade the other player
    player.currentDirection = secondMove
    player.move(stepBack)
